{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"concepts/01-objects/","text":"Objects / States There are two fundamentally different data types in ioBroker. So called states and objects. Objects represent rarely changing and larger data, like meta-data of your systems devices, configurations and additional files. States represent often changing data in your system, like the temperature of your living room. States can be used to trigger actions and states can create history data. For every state there must exist a corresponding object with the type state which describes the state. Hierarchy Objects are organized in a tree hierarchy (like the file system on your hard disk). The separator for this hierarchy is the dot . . Objects Object attributes Field Required type _id string ID of the object (e.g. system.adapter.0.admin.uptime type string Type of object (see below for possible values) common object Specific abstraction properties (depends on selected type) common.name string|object The (translated) name of the object (optional but strictly suggested to fill it) - see the translation for further details. native object Congruent properties of the target system It depends on the object type which common attributes are required. Object types The most common object types for adapters are state , channel and device . Type Parent-Type state channel or device channel device Group of state objects device none Group of channel or state objects There are additional object types, which are mostly used by the system (and are irrelevant for adapter development): Type enum host adapter instance meta config script user group chart folder Create a new object There exists several ways to create a new object in your own adapters: Use the instanceObjects attribute in your io-package.json Use the adapter methods on runtime States Instance namespace System namespaces ID object type system.adapter.* adapter Default adapter configuration and meta information system.adapter.*.[0-9] instance Instance configuration / individual settings system.group.* group User groups system.user.* user Users system.host.* host Controller processes system.meta.* meta System meta data (like UUID) system.config config System settings (like default currency, date format or language) system.certificates config Known certificates system.licenses config Licenses from iobroker.net system.repositories config List of repositories (like stable and beta ) script.js.* script Scripts for JavaScript-Engine enum.* enum Enumerations","title":"Objects / States"},{"location":"concepts/01-objects/#objects-states","text":"There are two fundamentally different data types in ioBroker. So called states and objects. Objects represent rarely changing and larger data, like meta-data of your systems devices, configurations and additional files. States represent often changing data in your system, like the temperature of your living room. States can be used to trigger actions and states can create history data. For every state there must exist a corresponding object with the type state which describes the state.","title":"Objects / States"},{"location":"concepts/01-objects/#hierarchy","text":"Objects are organized in a tree hierarchy (like the file system on your hard disk). The separator for this hierarchy is the dot . .","title":"Hierarchy"},{"location":"concepts/01-objects/#objects","text":"","title":"Objects"},{"location":"concepts/01-objects/#object-attributes","text":"Field Required type _id string ID of the object (e.g. system.adapter.0.admin.uptime type string Type of object (see below for possible values) common object Specific abstraction properties (depends on selected type) common.name string|object The (translated) name of the object (optional but strictly suggested to fill it) - see the translation for further details. native object Congruent properties of the target system It depends on the object type which common attributes are required.","title":"Object attributes"},{"location":"concepts/01-objects/#object-types","text":"The most common object types for adapters are state , channel and device . Type Parent-Type state channel or device channel device Group of state objects device none Group of channel or state objects There are additional object types, which are mostly used by the system (and are irrelevant for adapter development): Type enum host adapter instance meta config script user group chart folder","title":"Object types"},{"location":"concepts/01-objects/#create-a-new-object","text":"There exists several ways to create a new object in your own adapters: Use the instanceObjects attribute in your io-package.json Use the adapter methods on runtime","title":"Create a new object"},{"location":"concepts/01-objects/#states","text":"","title":"States"},{"location":"concepts/01-objects/#instance-namespace","text":"","title":"Instance namespace"},{"location":"concepts/01-objects/#system-namespaces","text":"ID object type system.adapter.* adapter Default adapter configuration and meta information system.adapter.*.[0-9] instance Instance configuration / individual settings system.group.* group User groups system.user.* user Users system.host.* host Controller processes system.meta.* meta System meta data (like UUID) system.config config System settings (like default currency, date format or language) system.certificates config Known certificates system.licenses config Licenses from iobroker.net system.repositories config List of repositories (like stable and beta ) script.js.* script Scripts for JavaScript-Engine enum.* enum Enumerations","title":"System namespaces"},{"location":"concepts/02-state-roles/","text":"State Roles Objects of type state need a common.role property set to one of the roles defined in the list below. The role information is very important and allows visualization and other adapters to detect the function of the object and also how/if they relate to other objects in the same channel , device or folder . Example: A RGB lamp can have the following three objects (or more) with different roles that belong together: switch : On/Off level.color.rgb : Color code (e.g. #RRGGBB ) level.brightness : Brightness value Different device templates which are used for detecting the required and optional objects (and their roles) can be found in the Type-detector repository . See Types Detector for further details. Common common.role common.type Description state very common purpose. If you don't know which role the state has, use this one. text string text.url string URL for usage in an anchor, iframe or img html string json string list array date string parsable by new Date(ddd) date number epoch seconds * 1000 Sensors common.write = true common.write = false (read-only) common.role common.type Description sensor.window boolean window opened ( true ) or closed ( false ) sensor.door boolean door opened ( true ) or closed ( false ) sensor.alarm boolean common alarm sensor.alarm.flood boolean water leakage alarm sensor.alarm.fire boolean fire sensor alarm sensor.alarm.secure boolean door opened, window opened or motion detected during alarm is ON. sensor.alarm.power boolean no power ( voltage = 0 ) sensor.light boolean feedback from lamp, that it is ON sensor.lock boolean actual position of lock sensor.motion boolean motion sensor sensor.rain boolean rain detected sensor.noise boolean noise detected Buttons common.read = false common.write = true (write-only) common.role common.type Description button boolean button.long boolean button.stop boolean button.stop.tilt boolean button.start boolean button.open.door boolean button.open.window boolean button.open.blind boolean button.open.tilt boolean button.close.blind boolean button.close.tilt boolean button.mode.* boolean button.mode.auto boolean button.mode.manual boolean button.mode.silent boolean Buttons as sensor common.read = true common.write = false (read-only) common.role common.type Description - button boolean Please avoid this role and use button.press or button.long - button.long boolean - button.press boolean Values common.read = true common.write = false (read-only) common.role common.type Description value number value.window number common.states = {\"0\": \"CLOSED\", \"1\": \"TILTED\", \"2\": \"OPEN\"} - it is important to have ( CLOSED/TILTED/OPEN ). Values can differ. value.temperature number common.unit = '\u00b0C' or '\u00b0F' or 'K' value.humidity number value.brightness number luminance level (unit: lux, ) value.min number value.max number value.default number value.battery number battery level value.valve number valve level value.time number getTime() of Date() object value.interval number Interval in seconds (can be 0.1 or less) - common.unit = 'sec' value.date string Date in form 2015.01.01 (without time) value.datetime string Date and time in system format value.gps.longitude number gps longitude coordinates value.gps.latitude number gps latitude value.gps.elevation number gps elevation value.gps number longitude and latitude together like '5.56;43.45' value.gps.accuracy number accuracy of current gps measurement value.gps.radius number radius of current gps measurement value.power number actual power - common.unit = 'W' or 'KW' value.power.consumption number energy consumption - common.unit = 'Wh' or 'kWh' value.power.reactive number reactive power - common.unit = 'VAr' value.direction number indicates up/down, left/right, 4-way switches, wind-direction, ... ) value.curtain number actual position of curtain value.blind number actual position of blind - common.max = fully open, common.min = fully closed value.tilt number actual tilt position - common.max = fully open, common.min = fully closed value.lock number actual position of lock value.speed number wind speed value.pressure number common.unit = 'mbar' value.distance number value.distance.visibility number value.severity number some severity (states can be provided), higher is more important value.warning number some warning (states can be provided), higher is more important value.sun.elevation number sun elevation in \u00b0 value.sun.azimuth number sun azimuth in \u00b0 value.voltage number Voltage in Volt - common.unit = 'V' value.current number Current in Ampere - common.unit = 'A' value.fill number Fill level - common.unit = 'l', 'ml', 'm3' or '%' value.blood.sugar number Blood sugar value - common.unit = 'mmol' or 'mgdl' Indicators common.read = true common.write = false (read-only) The difference of Indicators from Sensors is that indicators will be shown as small icon. Sensors as a real value. So the indicator may not be alone in the channel. It must be some other main state inside channel. `indicator `indicator.working - indicates that the target systems is executing something, like blinds or lock opening. `indicator.reachable - If device is online `indicator.connected - used only for instances. Use indicator.reachable for devices `indicator.maintenance - indicates system warnings/errors, alarms, service messages, battery empty or stuff like that `indicator.maintenance.lowbat `indicator.maintenance.unreach `indicator.maintenance.alarm `indicator.lowbat - true if low battery `indicator.alarm - same as indicator.maintenance.alarm `indicator.alarm.fire - fire detected `indicator.alarm.flood - flood detected `indicator.alarm.secure - door or window is opened `indicator.alarm.health - health problem Levels (numbers, read-write) common.read = true common.write = true `level `level.co2 - 0-100% ait quality `level.dimmer - brightness is dimmer too `level.blind - set blind position (max = fully open, min = fully closed) `level.temperature - set desired temperature `level.valve - set point for valve position `level.color.red `level.color.green `level.color.blue `level.color.white - rgbW `level.color.hue - color in \u00b0 0-360; 0=red, 120=green, 240=blue, 360=red(cyclic) `level.color.saturation `level.color.rgb - hex color like #rrggbb `level.color.luminance `level.color.temperature - color temperature in K\u00b0 2200 warm-white, 6500\u00b0 cold white `level.timer `level.timer.sleep - sleep timer. 0 - off, or in minutes ... `level.volume - ( min=0, max=100 ) - sound volume, but min, max can differ. min < max `level.volume.group - ( min=0, max=100 ) - sound volume, for the group of devices `level.curtain - set the curtain position `level.tilt - set the tilt position of blinds (max = fully open, min = fully closed) Switches (booleans, read-write) common.read = true common.write = true common.type=boolean, common.write=true `switch `switch.lock - lock ( true - open lock, false - close lock ) `switch.lock.door - door lock `switch.lock.window - window lock `switch.mode.boost - start/stop boost mode of thermostat `switch.mode.party - start/stop party mode of thermostat `switch.power - on/off thermostat or air conditioner `switch.light `switch.comfort - comfort mode `switch.enable `switch.power - power on/off `switch.mode. * `switch.mode.auto - auto mode on/off `switch.mode.manual - manual mode on/off `switch.mode.silent - silent mode on/off `switch.mode.moonlight - moon light mode on/off `switch.mode.color - color mode on/off `switch.gate - closes(false) or opens(true) the gate Air condition or thermostat `level.mode.fan - AUTO, HIGH, LOW, MEDIUM, QUIET, TURBO `level.mode.swing - AUTO, HORIZONTAL, STATIONARY, VERTICAL `level.mode.airconditioner - air conditioner: AUTO, COOL, DRY, ECO, FAN_ONLY, HEAT, OFF , heating thermostat: AUTO, MANUAL, VACATION , `level.mode.thermostat - thermostat: AUTO, MANUAL, VACATION , Additionally to these states normally the level.temperature and switch.power required to map the air conditioner. TODO: Think about ionization`and oscillation. Vacuum cleaner `level.mode.cleanup - Enumeration of AUTO, ECO, EXPRESS, NORMAL, QUIET . Only AUTO and NORMAL are required. `level.mode.work - Enumeration of AUTO, FAST, MEDIUM, SLOW, TURBO . Optional state. `value.water - 0-100% water level. `value.waste - 0-100% waste bin level. (0% - empty, 100% - full) `indicator.maintenance.waste - Waste bin is fool. `value.state - HOME, CLEANING, PAUSE and so on. Additionally, to these states normally the switch.power required to map the vacuum cleaner. switch.power in this case works as: true - clean, false - back to home. Optionally value.battery and Gate `switch.gate - closes(false) or opens(true) the gate (required) `value.position - position of the gate in percent (100% opened, 0% - closed) `value.gate - same as value.position `button.stop - stop motion of gate Media Special roles for media players `button.stop `button.play `button.next `button.prev `button.pause `switch.pause `button.forward `button.reverse `button.fastforward `button.fastreverse `button.volume.up `button.volume.down `media.seek - ( common.type=number ) % `media.mode.shuffle - ( common.type=number ) 0 - none, 1 - all, 2 - one `media.mode.repeat - ( common.type=boolean ) `media.state - ['play','stop','pause'] or [0 - pause, 1 - play, 2 - stop] or [true - playing/false - pause] `media.artist `media.album `media.title `media.title.next `media.cover - cover url `media.cover.big - big cover url `media.cover.small - tiny cover url `media.duration.text - e.g \"2:35\" `media.duration - ( common.type=number ) seconds `media.elapsed.text - e.g \"1:30\" `media.elapsed - ( common.type=number ) seconds `media.broadcastDate - ( common.type=string ) Broadcast date `media.mute - ( common.type=boolean ) true is muted `media.season - ( common.type=string ) season number (important the type is really \"string\" to be able to indicate absence of season with \"\") `media.episode - ( common.type=string ) episode number (important the type is really \"string\" to be able to indicate absence of episode with \"\") `media.mute.group - ( common.type=boolean ) mute of group of devices `media.tts - text to speech `media.bitrate - kbps `media.genre - genre song `media.date - year song `media.track - ( common.type=string ) current play track id [0 - ~] (important the type is really string to be able to indicate absence of track with \"\") `media.playid - media player track id `media.add - add current playlist `media.clear - clear current playlist (write-only) `media.playlist - json array like `media.url - url to play or current url `media.url.announcement - URL to play announcement `media.jump - Number of items to jump in the playlist (it can be negative) `media.content - Type of media being played such as audio/mp3 `media.link - State with the current file `media.input - number or string of input (AUX, AV, TV, SAT, ...) `level.bass - Bass level `level.treble - Treble level `switch.power.zone - power zone [ { \"artist\": \"\", \"album\": \"\", \"bitrate\":0, \"title\": \"\", \"file\": \"\", \"genre\": \"\", \"year\": 0, \"len\": \"00:00\", \"rating\": \"\", \"cover\": \"\" } ] `media.browser - json array like \"files\" [ { \"fanart\": \"\", \"file\": \"\",//smb://192.168.1.10/music/AtlantidaProject/ \"filetype\": \"\", //directory \"label\": \"\", \"lastmodified\": \"\", \"mimetype\": \"\", \"size\": 0, \"thumbnail\": \"\", \"title\": \"\", \"type\": \"\", \"lastmodified\": \"2016-02-27 16:05:46\", \"time\": \"88\", \"track\": \"01\", \"date\": \"2005\", \"artist\": \"yonderboy (H)\", \"album\": \"splendid isolation\", \"genre\": \"Trip-Hop\" } ] Weather `value.temperature - Actual temperature `value.temperature.windchill - Actual wind chill `value.temperature.dewpoint - Actual dew-point `value.temperature.feelslike - Actual temperature \"feels like\" `value.temperature.min - Minimal temperature in last 24h `value.temperature.max - Maximal temperature in last 24h `value.humidity - actual or average humidity `value.humidity.min - actual humidity `value.humidity.max - actual humidity `value.speed.wind - actual or average wind speed `value.speed.max.wind - maximal wind speed in last 24h `value.speed.min.wind - minimal wind speed in last 24h `value.speed.wind.gust - actual wind gust speed `value.direction.wind - actual or average wind direction in degrees `value.direction.max.wind - actual wind direction in degrees `value.direction.min.wind - actual wind direction in degrees `weather.direction.wind - actual or average wind direction as text, e.g. NNW `date - actual date or date of last read information `date.sunrise - Sunrise for today `date.sunset - Sunset for today `dayofweek - day of week as text `location - Text description of location (e.g. address) `weather.icon - Actual state icon URL for now `weather.icon.wind - Actual wind icon URL for now `weather.icon.name - Actual state icon name for now `weather.state - Actual weather description `value.precipitation - ( type: number, unit: mm ) precipitation for last 24 hours rain/snow (Niederschlag heute f\u00fcr Schnee oder Regen / \u043e\u0441\u0430\u0434\u043a\u0438 \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0441\u043d\u0435\u0433\u0430 \u0438\u043b\u0438 \u0434\u043e\u0436\u0434\u044f) `value.precipitation.hour - Actual precipitation level in last hour `value.precipitation.today - Actual precipitation level for today (till 0:00) `value.precipitation.chance - Actual precipitation chance for today `value.precipitation.type - Actual precipitation type for today. ( type: number ) States: 0 - NO, 1 - RAIN, 2 - SNOW, 3 - HAIL `value.radiation - Actual sun radiation level `value.uv - Actual UV level `value.clouds - Clouds on the sky. 0% - no clouds, 100% - many clouds. `value.rain - Actual rain level in last 24 hours `value.rain.hour - Actual rain level in last hour `value.rain.today - Actual rain level for today (till 0:00) `value.snow - Actual snow level in last 24 hours `value.snow.hour - Actual snow level in last hour `value.snow.today - Actual snow level for today (till 0:00) `value.snowline - Actual snow line in meters `weather.chart.url - URL to chart for weather history `weather.chart.url.forecast - URL to chart for weather forecast `weather.html - HTML object with weather description `weather.title - Very short description `weather.title.short - Very, very short description (One word) `weather.type - Type of weather information `weather.json - JSON object with specific data `value.speed.wind.forecast.0 - wind speed forecast for today `weather.state.forecast.0 - Weather description for today `value.direction.wind.forecast.0 - wind direction forecast for today in degrees `weather.direction.wind.forecast.0 - wind direction forecast for today as text `value.pressure.forecast.0 - forecast for pressure for today `value.temperature.min.forecast.0 - Min temperature forecast for today `value.temperature.max.forecast.0 - Max temperature forecast for today `value.precipitation.forecast.0 - ( type: number, unit: % ) Forecast of precipitation chance for today `value.precipitation.forecast.0 - ( type: number, unit: mm ) Forecast of precipitation level for today `weather.title.forecast.0 - Very short description for tomorrow `value.precipitation.day.forecast.0 - Forecast for precipitation for daytime `value.precipitation.night.forecast.0 - Forecast for precipitation for nighttime `date.forecast.1 - tomorrow date `weather.icon.forecast.1 - tomorrow icon `weather.state.forecast.1 - tomorrow weather state `value.temperature.min.forecast.1 `value.temperature.max.forecast.1 `value.precipitation.forecast.1 - ( type: number, unit: % ) Forecast of precipitation chance for tomorrow `value.precipitation.forecast.1 - ( type: number, unit: mm ) Forecast of precipitation level for tomorrow `value.direction.wind.forecast.1 `value.speed.wind.forecast.1 `value.pressure.forecast.1 Info `info.ip - ip of device `info.mac - mac of device `info.name - name of device `info.address - some other address (e.g. KNX) `info.serial - serial number `info.firmware - firmware version `info.hardware - hardware version `info.port - tcp port `info.standby - true if device in standby mode `info.status - status of device `info.display - information shown on device display `date.start - string or number `date.end - string or number Health common.type=number, common.read=true, common.write=false `value.health.fat - body fat index in % `value.health.weight - body weight in kg, lbs `value.health.bmi - bmi index `value.health.calories - burned calories `value.health.steps - steps done `value.health.bpm - heart beats per minute Others `url `url.icon - icon (additionally every object can have common.icon ) `url.cam - web camera url `url.blank - open URL in new window `url.same - open URL in this window `url.audio - URL for audio file `text.phone - phone number `adapter.messagebox ( common.type=object, common.write=true ) used to send messages to email, pushover and other adapters `adapter.wakeup ( common.type=boolean, common.write=true ) wake up adapter from suspended mode","title":"State Roles"},{"location":"concepts/02-state-roles/#state-roles","text":"Objects of type state need a common.role property set to one of the roles defined in the list below. The role information is very important and allows visualization and other adapters to detect the function of the object and also how/if they relate to other objects in the same channel , device or folder . Example: A RGB lamp can have the following three objects (or more) with different roles that belong together: switch : On/Off level.color.rgb : Color code (e.g. #RRGGBB ) level.brightness : Brightness value Different device templates which are used for detecting the required and optional objects (and their roles) can be found in the Type-detector repository . See Types Detector for further details.","title":"State Roles"},{"location":"concepts/02-state-roles/#common","text":"common.role common.type Description state very common purpose. If you don't know which role the state has, use this one. text string text.url string URL for usage in an anchor, iframe or img html string json string list array date string parsable by new Date(ddd) date number epoch seconds * 1000","title":"Common"},{"location":"concepts/02-state-roles/#sensors","text":"common.write = true common.write = false (read-only) common.role common.type Description sensor.window boolean window opened ( true ) or closed ( false ) sensor.door boolean door opened ( true ) or closed ( false ) sensor.alarm boolean common alarm sensor.alarm.flood boolean water leakage alarm sensor.alarm.fire boolean fire sensor alarm sensor.alarm.secure boolean door opened, window opened or motion detected during alarm is ON. sensor.alarm.power boolean no power ( voltage = 0 ) sensor.light boolean feedback from lamp, that it is ON sensor.lock boolean actual position of lock sensor.motion boolean motion sensor sensor.rain boolean rain detected sensor.noise boolean noise detected","title":"Sensors"},{"location":"concepts/02-state-roles/#buttons","text":"common.read = false common.write = true (write-only) common.role common.type Description button boolean button.long boolean button.stop boolean button.stop.tilt boolean button.start boolean button.open.door boolean button.open.window boolean button.open.blind boolean button.open.tilt boolean button.close.blind boolean button.close.tilt boolean button.mode.* boolean button.mode.auto boolean button.mode.manual boolean button.mode.silent boolean","title":"Buttons"},{"location":"concepts/02-state-roles/#buttons-as-sensor","text":"common.read = true common.write = false (read-only) common.role common.type Description - button boolean Please avoid this role and use button.press or button.long - button.long boolean - button.press boolean","title":"Buttons as sensor"},{"location":"concepts/02-state-roles/#values","text":"common.read = true common.write = false (read-only) common.role common.type Description value number value.window number common.states = {\"0\": \"CLOSED\", \"1\": \"TILTED\", \"2\": \"OPEN\"} - it is important to have ( CLOSED/TILTED/OPEN ). Values can differ. value.temperature number common.unit = '\u00b0C' or '\u00b0F' or 'K' value.humidity number value.brightness number luminance level (unit: lux, ) value.min number value.max number value.default number value.battery number battery level value.valve number valve level value.time number getTime() of Date() object value.interval number Interval in seconds (can be 0.1 or less) - common.unit = 'sec' value.date string Date in form 2015.01.01 (without time) value.datetime string Date and time in system format value.gps.longitude number gps longitude coordinates value.gps.latitude number gps latitude value.gps.elevation number gps elevation value.gps number longitude and latitude together like '5.56;43.45' value.gps.accuracy number accuracy of current gps measurement value.gps.radius number radius of current gps measurement value.power number actual power - common.unit = 'W' or 'KW' value.power.consumption number energy consumption - common.unit = 'Wh' or 'kWh' value.power.reactive number reactive power - common.unit = 'VAr' value.direction number indicates up/down, left/right, 4-way switches, wind-direction, ... ) value.curtain number actual position of curtain value.blind number actual position of blind - common.max = fully open, common.min = fully closed value.tilt number actual tilt position - common.max = fully open, common.min = fully closed value.lock number actual position of lock value.speed number wind speed value.pressure number common.unit = 'mbar' value.distance number value.distance.visibility number value.severity number some severity (states can be provided), higher is more important value.warning number some warning (states can be provided), higher is more important value.sun.elevation number sun elevation in \u00b0 value.sun.azimuth number sun azimuth in \u00b0 value.voltage number Voltage in Volt - common.unit = 'V' value.current number Current in Ampere - common.unit = 'A' value.fill number Fill level - common.unit = 'l', 'ml', 'm3' or '%' value.blood.sugar number Blood sugar value - common.unit = 'mmol' or 'mgdl'","title":"Values"},{"location":"concepts/02-state-roles/#indicators","text":"common.read = true common.write = false (read-only) The difference of Indicators from Sensors is that indicators will be shown as small icon. Sensors as a real value. So the indicator may not be alone in the channel. It must be some other main state inside channel. `indicator `indicator.working - indicates that the target systems is executing something, like blinds or lock opening. `indicator.reachable - If device is online `indicator.connected - used only for instances. Use indicator.reachable for devices `indicator.maintenance - indicates system warnings/errors, alarms, service messages, battery empty or stuff like that `indicator.maintenance.lowbat `indicator.maintenance.unreach `indicator.maintenance.alarm `indicator.lowbat - true if low battery `indicator.alarm - same as indicator.maintenance.alarm `indicator.alarm.fire - fire detected `indicator.alarm.flood - flood detected `indicator.alarm.secure - door or window is opened `indicator.alarm.health - health problem","title":"Indicators"},{"location":"concepts/02-state-roles/#levels-numbers-read-write","text":"common.read = true common.write = true `level `level.co2 - 0-100% ait quality `level.dimmer - brightness is dimmer too `level.blind - set blind position (max = fully open, min = fully closed) `level.temperature - set desired temperature `level.valve - set point for valve position `level.color.red `level.color.green `level.color.blue `level.color.white - rgbW `level.color.hue - color in \u00b0 0-360; 0=red, 120=green, 240=blue, 360=red(cyclic) `level.color.saturation `level.color.rgb - hex color like #rrggbb `level.color.luminance `level.color.temperature - color temperature in K\u00b0 2200 warm-white, 6500\u00b0 cold white `level.timer `level.timer.sleep - sleep timer. 0 - off, or in minutes ... `level.volume - ( min=0, max=100 ) - sound volume, but min, max can differ. min < max `level.volume.group - ( min=0, max=100 ) - sound volume, for the group of devices `level.curtain - set the curtain position `level.tilt - set the tilt position of blinds (max = fully open, min = fully closed)","title":"Levels (numbers, read-write)"},{"location":"concepts/02-state-roles/#switches-booleans-read-write","text":"common.read = true common.write = true common.type=boolean, common.write=true `switch `switch.lock - lock ( true - open lock, false - close lock ) `switch.lock.door - door lock `switch.lock.window - window lock `switch.mode.boost - start/stop boost mode of thermostat `switch.mode.party - start/stop party mode of thermostat `switch.power - on/off thermostat or air conditioner `switch.light `switch.comfort - comfort mode `switch.enable `switch.power - power on/off `switch.mode. * `switch.mode.auto - auto mode on/off `switch.mode.manual - manual mode on/off `switch.mode.silent - silent mode on/off `switch.mode.moonlight - moon light mode on/off `switch.mode.color - color mode on/off `switch.gate - closes(false) or opens(true) the gate","title":"Switches (booleans, read-write)"},{"location":"concepts/02-state-roles/#air-condition-or-thermostat","text":"`level.mode.fan - AUTO, HIGH, LOW, MEDIUM, QUIET, TURBO `level.mode.swing - AUTO, HORIZONTAL, STATIONARY, VERTICAL `level.mode.airconditioner - air conditioner: AUTO, COOL, DRY, ECO, FAN_ONLY, HEAT, OFF , heating thermostat: AUTO, MANUAL, VACATION , `level.mode.thermostat - thermostat: AUTO, MANUAL, VACATION , Additionally to these states normally the level.temperature and switch.power required to map the air conditioner. TODO: Think about ionization`and oscillation.","title":"Air condition or thermostat"},{"location":"concepts/02-state-roles/#vacuum-cleaner","text":"`level.mode.cleanup - Enumeration of AUTO, ECO, EXPRESS, NORMAL, QUIET . Only AUTO and NORMAL are required. `level.mode.work - Enumeration of AUTO, FAST, MEDIUM, SLOW, TURBO . Optional state. `value.water - 0-100% water level. `value.waste - 0-100% waste bin level. (0% - empty, 100% - full) `indicator.maintenance.waste - Waste bin is fool. `value.state - HOME, CLEANING, PAUSE and so on. Additionally, to these states normally the switch.power required to map the vacuum cleaner. switch.power in this case works as: true - clean, false - back to home. Optionally value.battery and","title":"Vacuum cleaner"},{"location":"concepts/02-state-roles/#gate","text":"`switch.gate - closes(false) or opens(true) the gate (required) `value.position - position of the gate in percent (100% opened, 0% - closed) `value.gate - same as value.position `button.stop - stop motion of gate","title":"Gate"},{"location":"concepts/02-state-roles/#media","text":"Special roles for media players `button.stop `button.play `button.next `button.prev `button.pause `switch.pause `button.forward `button.reverse `button.fastforward `button.fastreverse `button.volume.up `button.volume.down `media.seek - ( common.type=number ) % `media.mode.shuffle - ( common.type=number ) 0 - none, 1 - all, 2 - one `media.mode.repeat - ( common.type=boolean ) `media.state - ['play','stop','pause'] or [0 - pause, 1 - play, 2 - stop] or [true - playing/false - pause] `media.artist `media.album `media.title `media.title.next `media.cover - cover url `media.cover.big - big cover url `media.cover.small - tiny cover url `media.duration.text - e.g \"2:35\" `media.duration - ( common.type=number ) seconds `media.elapsed.text - e.g \"1:30\" `media.elapsed - ( common.type=number ) seconds `media.broadcastDate - ( common.type=string ) Broadcast date `media.mute - ( common.type=boolean ) true is muted `media.season - ( common.type=string ) season number (important the type is really \"string\" to be able to indicate absence of season with \"\") `media.episode - ( common.type=string ) episode number (important the type is really \"string\" to be able to indicate absence of episode with \"\") `media.mute.group - ( common.type=boolean ) mute of group of devices `media.tts - text to speech `media.bitrate - kbps `media.genre - genre song `media.date - year song `media.track - ( common.type=string ) current play track id [0 - ~] (important the type is really string to be able to indicate absence of track with \"\") `media.playid - media player track id `media.add - add current playlist `media.clear - clear current playlist (write-only) `media.playlist - json array like `media.url - url to play or current url `media.url.announcement - URL to play announcement `media.jump - Number of items to jump in the playlist (it can be negative) `media.content - Type of media being played such as audio/mp3 `media.link - State with the current file `media.input - number or string of input (AUX, AV, TV, SAT, ...) `level.bass - Bass level `level.treble - Treble level `switch.power.zone - power zone [ { \"artist\": \"\", \"album\": \"\", \"bitrate\":0, \"title\": \"\", \"file\": \"\", \"genre\": \"\", \"year\": 0, \"len\": \"00:00\", \"rating\": \"\", \"cover\": \"\" } ] `media.browser - json array like \"files\" [ { \"fanart\": \"\", \"file\": \"\",//smb://192.168.1.10/music/AtlantidaProject/ \"filetype\": \"\", //directory \"label\": \"\", \"lastmodified\": \"\", \"mimetype\": \"\", \"size\": 0, \"thumbnail\": \"\", \"title\": \"\", \"type\": \"\", \"lastmodified\": \"2016-02-27 16:05:46\", \"time\": \"88\", \"track\": \"01\", \"date\": \"2005\", \"artist\": \"yonderboy (H)\", \"album\": \"splendid isolation\", \"genre\": \"Trip-Hop\" } ]","title":"Media"},{"location":"concepts/02-state-roles/#weather","text":"`value.temperature - Actual temperature `value.temperature.windchill - Actual wind chill `value.temperature.dewpoint - Actual dew-point `value.temperature.feelslike - Actual temperature \"feels like\" `value.temperature.min - Minimal temperature in last 24h `value.temperature.max - Maximal temperature in last 24h `value.humidity - actual or average humidity `value.humidity.min - actual humidity `value.humidity.max - actual humidity `value.speed.wind - actual or average wind speed `value.speed.max.wind - maximal wind speed in last 24h `value.speed.min.wind - minimal wind speed in last 24h `value.speed.wind.gust - actual wind gust speed `value.direction.wind - actual or average wind direction in degrees `value.direction.max.wind - actual wind direction in degrees `value.direction.min.wind - actual wind direction in degrees `weather.direction.wind - actual or average wind direction as text, e.g. NNW `date - actual date or date of last read information `date.sunrise - Sunrise for today `date.sunset - Sunset for today `dayofweek - day of week as text `location - Text description of location (e.g. address) `weather.icon - Actual state icon URL for now `weather.icon.wind - Actual wind icon URL for now `weather.icon.name - Actual state icon name for now `weather.state - Actual weather description `value.precipitation - ( type: number, unit: mm ) precipitation for last 24 hours rain/snow (Niederschlag heute f\u00fcr Schnee oder Regen / \u043e\u0441\u0430\u0434\u043a\u0438 \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0441\u043d\u0435\u0433\u0430 \u0438\u043b\u0438 \u0434\u043e\u0436\u0434\u044f) `value.precipitation.hour - Actual precipitation level in last hour `value.precipitation.today - Actual precipitation level for today (till 0:00) `value.precipitation.chance - Actual precipitation chance for today `value.precipitation.type - Actual precipitation type for today. ( type: number ) States: 0 - NO, 1 - RAIN, 2 - SNOW, 3 - HAIL `value.radiation - Actual sun radiation level `value.uv - Actual UV level `value.clouds - Clouds on the sky. 0% - no clouds, 100% - many clouds. `value.rain - Actual rain level in last 24 hours `value.rain.hour - Actual rain level in last hour `value.rain.today - Actual rain level for today (till 0:00) `value.snow - Actual snow level in last 24 hours `value.snow.hour - Actual snow level in last hour `value.snow.today - Actual snow level for today (till 0:00) `value.snowline - Actual snow line in meters `weather.chart.url - URL to chart for weather history `weather.chart.url.forecast - URL to chart for weather forecast `weather.html - HTML object with weather description `weather.title - Very short description `weather.title.short - Very, very short description (One word) `weather.type - Type of weather information `weather.json - JSON object with specific data `value.speed.wind.forecast.0 - wind speed forecast for today `weather.state.forecast.0 - Weather description for today `value.direction.wind.forecast.0 - wind direction forecast for today in degrees `weather.direction.wind.forecast.0 - wind direction forecast for today as text `value.pressure.forecast.0 - forecast for pressure for today `value.temperature.min.forecast.0 - Min temperature forecast for today `value.temperature.max.forecast.0 - Max temperature forecast for today `value.precipitation.forecast.0 - ( type: number, unit: % ) Forecast of precipitation chance for today `value.precipitation.forecast.0 - ( type: number, unit: mm ) Forecast of precipitation level for today `weather.title.forecast.0 - Very short description for tomorrow `value.precipitation.day.forecast.0 - Forecast for precipitation for daytime `value.precipitation.night.forecast.0 - Forecast for precipitation for nighttime `date.forecast.1 - tomorrow date `weather.icon.forecast.1 - tomorrow icon `weather.state.forecast.1 - tomorrow weather state `value.temperature.min.forecast.1 `value.temperature.max.forecast.1 `value.precipitation.forecast.1 - ( type: number, unit: % ) Forecast of precipitation chance for tomorrow `value.precipitation.forecast.1 - ( type: number, unit: mm ) Forecast of precipitation level for tomorrow `value.direction.wind.forecast.1 `value.speed.wind.forecast.1 `value.pressure.forecast.1","title":"Weather"},{"location":"concepts/02-state-roles/#info","text":"`info.ip - ip of device `info.mac - mac of device `info.name - name of device `info.address - some other address (e.g. KNX) `info.serial - serial number `info.firmware - firmware version `info.hardware - hardware version `info.port - tcp port `info.standby - true if device in standby mode `info.status - status of device `info.display - information shown on device display `date.start - string or number `date.end - string or number","title":"Info"},{"location":"concepts/02-state-roles/#health","text":"common.type=number, common.read=true, common.write=false `value.health.fat - body fat index in % `value.health.weight - body weight in kg, lbs `value.health.bmi - bmi index `value.health.calories - burned calories `value.health.steps - steps done `value.health.bpm - heart beats per minute","title":"Health"},{"location":"concepts/02-state-roles/#others","text":"`url `url.icon - icon (additionally every object can have common.icon ) `url.cam - web camera url `url.blank - open URL in new window `url.same - open URL in this window `url.audio - URL for audio file `text.phone - phone number `adapter.messagebox ( common.type=object, common.write=true ) used to send messages to email, pushover and other adapters `adapter.wakeup ( common.type=boolean, common.write=true ) wake up adapter from suspended mode","title":"Others"},{"location":"concepts/03-type-detector/","text":"Type detector","title":"Type detector"},{"location":"concepts/03-type-detector/#type-detector","text":"","title":"Type detector"},{"location":"development/01-adapter-creator/","text":"Adapter creator","title":"Adapter creator"},{"location":"development/01-adapter-creator/#adapter-creator","text":"","title":"Adapter creator"},{"location":"development/02-debugging/","text":"Debugging / dev-server","title":"Debugging / dev-server"},{"location":"development/02-debugging/#debugging-dev-server","text":"","title":"Debugging / dev-server"},{"location":"development/03-directory-structure/","text":"Directory structure","title":"Directory structure"},{"location":"development/03-directory-structure/#directory-structure","text":"","title":"Directory structure"},{"location":"development/04-testing/","text":"Testing","title":"Testing"},{"location":"development/04-testing/#testing","text":"","title":"Testing"},{"location":"development/05-publishing/","text":"Publishing / release script","title":"Publishing / release script"},{"location":"development/05-publishing/#publishing-release-script","text":"","title":"Publishing / release script"},{"location":"development/06-translations/","text":"Adapter Translations Whenever possible, adapters should provide multiple languages for everything the user will see. Like Adapter name Adapter description Adapter news Object names Instance configuration inputs VIS widgets End user documentation / help ... Languages Code Required Language en English de German ru Russian pt Portuguese nl Dutch fr French it Italian es Spanish pl Polish zh-cn Chinese Translation tools Dev-Tools The easiest way to translate strings is the adapter-dev package . It should be added as a dev dependency the adapter project and provides several commands to translate admin UI, io-package objects and other texts. npm install --save-dev @iobroker/adapter-dev Website To translate an English text to multiple languages, the ioBroker translator tool is also helpful. The website will translate any English phrase to all supported languages and returns JSON. Example output: { \"Example\" : { \"en\" : \"Example\" , \"de\" : \"Beispiel\" , \"ru\" : \"\u041f\u0440\u0438\u043c\u0435\u0440\" , \"pt\" : \"Exemplo\" , \"nl\" : \"Voorbeeld\" , \"fr\" : \"Exemple\" , \"it\" : \"Esempio\" , \"es\" : \"Ejemplo\" , \"pl\" : \"Przyk\u0142ad\" , \"zh-cn\" : \"\u4f8b\u5b50\" } }","title":"Adapter Translations"},{"location":"development/06-translations/#adapter-translations","text":"Whenever possible, adapters should provide multiple languages for everything the user will see. Like Adapter name Adapter description Adapter news Object names Instance configuration inputs VIS widgets End user documentation / help ...","title":"Adapter Translations"},{"location":"development/06-translations/#languages","text":"Code Required Language en English de German ru Russian pt Portuguese nl Dutch fr French it Italian es Spanish pl Polish zh-cn Chinese","title":"Languages"},{"location":"development/06-translations/#translation-tools","text":"","title":"Translation tools"},{"location":"development/06-translations/#dev-tools","text":"The easiest way to translate strings is the adapter-dev package . It should be added as a dev dependency the adapter project and provides several commands to translate admin UI, io-package objects and other texts. npm install --save-dev @iobroker/adapter-dev","title":"Dev-Tools"},{"location":"development/06-translations/#website","text":"To translate an English text to multiple languages, the ioBroker translator tool is also helpful. The website will translate any English phrase to all supported languages and returns JSON. Example output: { \"Example\" : { \"en\" : \"Example\" , \"de\" : \"Beispiel\" , \"ru\" : \"\u041f\u0440\u0438\u043c\u0435\u0440\" , \"pt\" : \"Exemplo\" , \"nl\" : \"Voorbeeld\" , \"fr\" : \"Exemple\" , \"it\" : \"Esempio\" , \"es\" : \"Ejemplo\" , \"pl\" : \"Przyk\u0142ad\" , \"zh-cn\" : \"\u4f8b\u5b50\" } }","title":"Website"},{"location":"getting-started/01-installation/","text":"Install tools Development computer We suggest you develop on your own computer and not on the system where you might already have your ioBroker installation running. It is much easier to do local development and then later deploy the adapter to your real installation once everything is working. Note: There is no need to install ioBroker on your computer to develop an adapter. Install NodeJS To develop for ioBroker you need the current NodeJS LTS version installed on your PC. If you installed ioBroker, NodeJS is already on your system, otherwise download and install it from the following sources: Windows / Mac Debian and Ubuntu based distributions (deb) Enterprise Linux based distributions (rpm) All other systems Install Visual Studio Code (optional) As an IDE (integrated development environment) we will use Visual Studio Code in this tutorial. If you want to use another IDE or simple texteditor, that is fine, too. Please download it from the official page . Install ioBroker dev-server The easiest way to develop adapters is using dev-server . Simply execute the following command in your console/terminal: npm install --global @iobroker/dev-server Continue to \"Creating your first adapter\"","title":"Install tools"},{"location":"getting-started/01-installation/#install-tools","text":"","title":"Install tools"},{"location":"getting-started/01-installation/#development-computer","text":"We suggest you develop on your own computer and not on the system where you might already have your ioBroker installation running. It is much easier to do local development and then later deploy the adapter to your real installation once everything is working. Note: There is no need to install ioBroker on your computer to develop an adapter.","title":"Development computer"},{"location":"getting-started/01-installation/#install-nodejs","text":"To develop for ioBroker you need the current NodeJS LTS version installed on your PC. If you installed ioBroker, NodeJS is already on your system, otherwise download and install it from the following sources: Windows / Mac Debian and Ubuntu based distributions (deb) Enterprise Linux based distributions (rpm) All other systems","title":"Install NodeJS"},{"location":"getting-started/01-installation/#install-visual-studio-code-optional","text":"As an IDE (integrated development environment) we will use Visual Studio Code in this tutorial. If you want to use another IDE or simple texteditor, that is fine, too. Please download it from the official page .","title":"Install Visual Studio Code (optional)"},{"location":"getting-started/01-installation/#install-iobroker-dev-server","text":"The easiest way to develop adapters is using dev-server . Simply execute the following command in your console/terminal: npm install --global @iobroker/dev-server Continue to \"Creating your first adapter\"","title":"Install ioBroker dev-server"},{"location":"getting-started/02-create-adapter/","text":"Creating your first adapter To get you started with writing an ioBroker adapter, we will create a simple adapter for getting the number of page views for ioBroker's German Wikipedia page . First, run the adapter creator in a directory where you want to keep your ioBroker code. 1 The creator will create a new subdirectory for your new adapter. npx @iobroker/create-adapter It is recommended to try creator with dummy data the first few times. For this getting started you can enter dummy data and select random options (play around) for the most questions. You can decide if you want to do Javascript or Typescript. The only important options to follow the rest of this getting started are: Adapter (instead of Visualization ) JSON UI to the question about the framework for Admin UI. yes to dev-server yes to 'Would you like to automate new releases with one simple command?' (release script). You can have a look at the folders and files created. It is a complete template of an ioBroker adapter. The most important file is main.js or src/main.ts where your code goes. The UI for controlling options of your adapter goes into admin . If you selected JSON UI before, you will find a admin/jsonConfig.json file there, which we will use to define a simple UI which is sufficient for most adapters. Now move into your adapter dir and fire up dev-server: cd ioBroker.test dev-server watch It will run ioBroker, and you can access admin at http://localhost:8081 Continue to \"Write adapter code\" We suggest using a local directory and regularly push local changes to GitHub for backup and transport instead of relying on full directory synchronization (like Nextcloud, Dropbox, iCloud or similar), because they might break the git repository structure or dev-server or npm dependencies. \u21a9","title":"Creating your first adapter"},{"location":"getting-started/02-create-adapter/#creating-your-first-adapter","text":"To get you started with writing an ioBroker adapter, we will create a simple adapter for getting the number of page views for ioBroker's German Wikipedia page . First, run the adapter creator in a directory where you want to keep your ioBroker code. 1 The creator will create a new subdirectory for your new adapter. npx @iobroker/create-adapter It is recommended to try creator with dummy data the first few times. For this getting started you can enter dummy data and select random options (play around) for the most questions. You can decide if you want to do Javascript or Typescript. The only important options to follow the rest of this getting started are: Adapter (instead of Visualization ) JSON UI to the question about the framework for Admin UI. yes to dev-server yes to 'Would you like to automate new releases with one simple command?' (release script). You can have a look at the folders and files created. It is a complete template of an ioBroker adapter. The most important file is main.js or src/main.ts where your code goes. The UI for controlling options of your adapter goes into admin . If you selected JSON UI before, you will find a admin/jsonConfig.json file there, which we will use to define a simple UI which is sufficient for most adapters. Now move into your adapter dir and fire up dev-server: cd ioBroker.test dev-server watch It will run ioBroker, and you can access admin at http://localhost:8081 Continue to \"Write adapter code\" We suggest using a local directory and regularly push local changes to GitHub for backup and transport instead of relying on full directory synchronization (like Nextcloud, Dropbox, iCloud or similar), because they might break the git repository structure or dev-server or npm dependencies. \u21a9","title":"Creating your first adapter"},{"location":"getting-started/03-edit-adapter/","text":"Write adapter code For network communication the adapter relies on the axios module, let's add it. In adapter dir run this: npm install --save-prod axios Additionally, we need to import axios in main.js or main.ts as follows. Please add the line at the top of the main file (there should already be a line containing the require function there, best is to keep all imports in one place). JavaScript TypeScript const axios = require ( \"axios\" ). default ; import axios from 'axios' ; Now have a look at the boilerplate and example code in main.js or main.ts . You should see a Class with a constructor where eventHandlers are added to ready , stateChange and unload by default. These are the functions that ioBroker will call in your code. First we will implement to download some data from the API in onReady after the adapter start. You should read the examples in the onReady function that already explain how the adapter interacts with ioBroker in a lot of common examples. Feel free to try different things here, too. If you create objects and set states you can see the results of your actions in the dev-server admin . Now let's retrieve some data in the onReady function. Replace the existing code with this: JavaScript TypeScript async onReady () { axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/20220401/20220404' ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } private async onReady () : Promise < void > { axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/20220401/20220404' ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e : any ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } Regarding the role property of the state: Select a role from this list . Try to be as specific as possible. If you think a role is missing, feel free to create a pull request and propose a change for this file . Using the right role here will allow other adapers in the ioBroker ecosystem to understand what your state is about and control it. If you have dev-server watch running as explained earlier this should already create a few objects with values in ioBroker on file save. But currently this is very static code. Let's allow the user to select a date. We start by defining the parameters for our adapter in io-package.json , change the native section to this: \"native\" : { \"startDate\" : \"20220401\" , \"endDate\" : \"20220404\" }, JSON UI allows us to easily add an options page in ioBroker.admin without minding frontend code at all. The UI is defined in admin/jsonConfig.json , so we change it to reflect our new options: { \"type\" : \"panel\" , \"i18n\" : true , \"items\" : { \"startDate\" : { \"newLine\" : true , \"type\" : \"text\" , \"label\" : \"Start Date:\" , \"maxLength\" : 8 , \"validator\" : \"/[0-9]{8}/.test(data.startDate)\" }, \"endDate\" : { \"type\" : \"text\" , \"label\" : \"End Date:\" , \"maxLength\" : 8 , \"validator\" : \"/[0-9]{8}/.test(data.endDate)\" }, \"_errorMessage\" : { \"newLine\" : true , \"type\" : \"staticText\" , \"text\" : \"Please enter Date in format YYYYMMDD.\" , \"hidden\" : \"/[0-9]{8}/.test(data.startDate) && /[0-9]{8}/.test(data.endDate)\" , \"style\" : { \"color\" : \"red\" } } } } For typescript Adapters, also change src/lib/adminConfig.ts to this: TypeScript // This file extends the AdapterConfig type from \"@types/iobroker\" // Augment the globally declared type ioBroker.AdapterConfig declare global { namespace ioBroker { interface AdapterConfig { startDate : string ; endDate : string ; } } } // this is required so the above AdapterConfig is found by TypeScript / type checking export {}; Hint: In order for changes to io-package.json and jsonConfig.json an upload is required. You can do that by running dev-server upload in your adapter directory. It will add two text fields in configuration where the user can select start and enddates for our page views request. Now we need to adjust the onReady code to read the config and adjust the request. JavaScript TypeScript async onReady () { const adapterObjects = await this . getAdapterObjectsAsync (); //get all current adapter objects. axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = `https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/ ${ this . config . startDate } / ${ this . config . endDate } ` ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); //remove used objects from the hashmap. //NOTE: usually we can omit 'test.x.' on our own objects, but getAdapterObjects fills the hashmap for full ids. delete adapterObjects [ this . namespace + '.' + day . timestamp ]; } //delete all Objects that were not used above: for ( const id of Object . keys ( adapterObjects )) { await this . delObjectAsync ( id ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } private async onReady () : Promise < void > { const adapterObjects = await this . getAdapterObjectsAsync (); //get all current adapter objects. axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = `https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/ ${ this . config . startDate } / ${ this . config . endDate } ` ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); //remove used objects from the hashmap. //NOTE: usually we can omit 'test.x.' on our own objects, but getAdapterObjects fills the hashmap for full ids. delete adapterObjects [ this . namespace + '.' + day . timestamp ]; } //delete all Objects that were not used above: for ( const id of Object . keys ( adapterObjects )) { await this . delObjectAsync ( id ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e : any ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } Of course, you would need to add a few checks for the user input. Also loading only once in the onReady function is only useful for schedule Adapter, daemons usually employ setTimeout to regularly download something or even listen on events coming from the outside. But this should give you a basic idea on how to fill ioBroker states from an API request. If you want to listen to state changes (i.e. the user wants to control a device) this happens in onStateChange . Feel free to experiment with that also (you could create a state of type boolean with role button that you can click in admin and poll new data or similar). 1 Continue to \"Publishing your adapter\" To be honest we did not yet find a sensible example for the getting started guide. If you have some idea or know of a free to use and very stable API that could be helpful for such a tutorial, feel free to create an issue on github . \u21a9","title":"Write adapter code"},{"location":"getting-started/03-edit-adapter/#write-adapter-code","text":"For network communication the adapter relies on the axios module, let's add it. In adapter dir run this: npm install --save-prod axios Additionally, we need to import axios in main.js or main.ts as follows. Please add the line at the top of the main file (there should already be a line containing the require function there, best is to keep all imports in one place). JavaScript TypeScript const axios = require ( \"axios\" ). default ; import axios from 'axios' ; Now have a look at the boilerplate and example code in main.js or main.ts . You should see a Class with a constructor where eventHandlers are added to ready , stateChange and unload by default. These are the functions that ioBroker will call in your code. First we will implement to download some data from the API in onReady after the adapter start. You should read the examples in the onReady function that already explain how the adapter interacts with ioBroker in a lot of common examples. Feel free to try different things here, too. If you create objects and set states you can see the results of your actions in the dev-server admin . Now let's retrieve some data in the onReady function. Replace the existing code with this: JavaScript TypeScript async onReady () { axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/20220401/20220404' ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } private async onReady () : Promise < void > { axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/20220401/20220404' ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e : any ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } Regarding the role property of the state: Select a role from this list . Try to be as specific as possible. If you think a role is missing, feel free to create a pull request and propose a change for this file . Using the right role here will allow other adapers in the ioBroker ecosystem to understand what your state is about and control it. If you have dev-server watch running as explained earlier this should already create a few objects with values in ioBroker on file save. But currently this is very static code. Let's allow the user to select a date. We start by defining the parameters for our adapter in io-package.json , change the native section to this: \"native\" : { \"startDate\" : \"20220401\" , \"endDate\" : \"20220404\" }, JSON UI allows us to easily add an options page in ioBroker.admin without minding frontend code at all. The UI is defined in admin/jsonConfig.json , so we change it to reflect our new options: { \"type\" : \"panel\" , \"i18n\" : true , \"items\" : { \"startDate\" : { \"newLine\" : true , \"type\" : \"text\" , \"label\" : \"Start Date:\" , \"maxLength\" : 8 , \"validator\" : \"/[0-9]{8}/.test(data.startDate)\" }, \"endDate\" : { \"type\" : \"text\" , \"label\" : \"End Date:\" , \"maxLength\" : 8 , \"validator\" : \"/[0-9]{8}/.test(data.endDate)\" }, \"_errorMessage\" : { \"newLine\" : true , \"type\" : \"staticText\" , \"text\" : \"Please enter Date in format YYYYMMDD.\" , \"hidden\" : \"/[0-9]{8}/.test(data.startDate) && /[0-9]{8}/.test(data.endDate)\" , \"style\" : { \"color\" : \"red\" } } } } For typescript Adapters, also change src/lib/adminConfig.ts to this: TypeScript // This file extends the AdapterConfig type from \"@types/iobroker\" // Augment the globally declared type ioBroker.AdapterConfig declare global { namespace ioBroker { interface AdapterConfig { startDate : string ; endDate : string ; } } } // this is required so the above AdapterConfig is found by TypeScript / type checking export {}; Hint: In order for changes to io-package.json and jsonConfig.json an upload is required. You can do that by running dev-server upload in your adapter directory. It will add two text fields in configuration where the user can select start and enddates for our page views request. Now we need to adjust the onReady code to read the config and adjust the request. JavaScript TypeScript async onReady () { const adapterObjects = await this . getAdapterObjectsAsync (); //get all current adapter objects. axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = `https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/ ${ this . config . startDate } / ${ this . config . endDate } ` ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); //remove used objects from the hashmap. //NOTE: usually we can omit 'test.x.' on our own objects, but getAdapterObjects fills the hashmap for full ids. delete adapterObjects [ this . namespace + '.' + day . timestamp ]; } //delete all Objects that were not used above: for ( const id of Object . keys ( adapterObjects )) { await this . delObjectAsync ( id ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } private async onReady () : Promise < void > { const adapterObjects = await this . getAdapterObjectsAsync (); //get all current adapter objects. axios . defaults . timeout = 5000 ; //set timeout to 5 seconds //download data: const url = `https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/de.wikipedia/all-access/all-agents/IoBroker/daily/ ${ this . config . startDate } / ${ this . config . endDate } ` ; try { const response = await axios . get ( url ); if ( response . status === 200 ) { const data = response . data ; //for each day: for ( const day of data . items ) { //create object, using timestamp as ID. ID should always be unique and constant for a certain device. await this . setObjectNotExistsAsync ( day . timestamp , { type : 'state' , common : { type : 'number' , role : 'value' , //select a role from https://www.iobroker.net/#en/documentation/dev/stateroles.md - try to be as specific as possible. read : true , write : false , name : `Day ${ day . timestamp } ` }, native : {} }); //now set the value of the state. Set 'ack' to true in order to show ioBroker that this data comes from the 'device'. await this . setStateAsync ( day . timestamp , day . views , true ); //remove used objects from the hashmap. //NOTE: usually we can omit 'test.x.' on our own objects, but getAdapterObjects fills the hashmap for full ids. delete adapterObjects [ this . namespace + '.' + day . timestamp ]; } //delete all Objects that were not used above: for ( const id of Object . keys ( adapterObjects )) { await this . delObjectAsync ( id ); } } else { this . log . error ( 'Could not retrieve data, status code ' + response . status ); } } catch ( e : any ) { this . log . error ( 'Could not retrieve data: ' + e . message ); } } Of course, you would need to add a few checks for the user input. Also loading only once in the onReady function is only useful for schedule Adapter, daemons usually employ setTimeout to regularly download something or even listen on events coming from the outside. But this should give you a basic idea on how to fill ioBroker states from an API request. If you want to listen to state changes (i.e. the user wants to control a device) this happens in onStateChange . Feel free to experiment with that also (you could create a state of type boolean with role button that you can click in admin and poll new data or similar). 1 Continue to \"Publishing your adapter\" To be honest we did not yet find a sensible example for the getting started guide. If you have some idea or know of a free to use and very stable API that could be helpful for such a tutorial, feel free to create an issue on github . \u21a9","title":"Write adapter code"},{"location":"getting-started/04-publish-adapter/","text":"Publishing your adapter Check Adapter before publishing Of course you should check if your adapter is working as expected, before publishing it. But there are also some requirements that can be automatically tested. You can either do that in the ioBroker developer portal (log in with your GitHub account and it should already list your adapters) or manually online (paste the repository URL there). Some of the warnings can be ignored, for example if your adapter is not yet on npm or in the repository. Good resources for solving such errors and warnings can be found in the best practices and in the review checklist for entry into the repository . Publish It is strongly recommended to use the release script and the test-and-release workflow. If you answered the question 'Do you want to release your adapter with a single comment' in the creator with 'yes', release script should already be installed and configured. If not, have a look here or in the sample adapter . NPM In order for the workflow to also publish your adapter to npm, you need to add a secret to your repository. Log in to NPM or create an account (might use your GitHub account for that). You should enable 2FA for your account. On the right side, you should see your profile picture. Click on it and select \"Access Tokens\". Create a new classic token, enter a name for you to identify it by (for example 'ioBroker' or your adapter name) and select 'Automation' as type (if it does not show up, you did not yet enable 2FA for the account, then select 'Publish', but maybe first enable 2FA. It really makes sense!). Now, copy the token . You won't be able to read it again later and have to create a new one. Add Secret to GitHub Go to your repository on GitHub and select \"Settings\" in the top bar. On the left find \"Secrets and variables\", select \"Actions\" and click on \"New repository secret\". Enter the name NPM_TOKEN and paste the token you copied from npm. Save. Check in Settings/Actions/General if the Workflow permissions are set to \"read and write permissions\". If not, change it and save. Enable automatic npm release in workflow file The last step is to edit the file .github/workflows/test-and-release.yml in your adapter. You can do this either with the online editor at GitHub or with your favorite editor / IDE and pushing to GitHub, just like other files of your adater. Open the file, scroll down to the line, where it says '# TODO: To enable automatic npm releases, create a token on npmjs.org'. Remove that line and uncomment the following lines, starting with the line where it says deploy: . Since it is a yaml file, be sure to keep the indentation. For now, keep the part with sentry commented out. Modify changelog In your README.md , at the bottom, there should already be a section 'Work in progress' in the changelog, i.e. looking like this: ### **WORK IN PROGRESS** This line is a placeholder for the actual date of the release. Just add what you modified as bullet points ('*') below that line and the release script will use them as changelog / news and put in the right date. Do this for every release. Run release script After all of the above is done, run the release script: npm run release It will ask you about the type of release or you can already supply that as parameter ( patch , minor or major ). Basically, if you fix something, use patch , if you add a new feature, use minor , if the user needs to change something, use major . See SemVer for details. The script will assemble the changelog, translate it and put it into the io-package.json , update the version number, in io-package.json and package.json , commit the changes, create a git tag and push everything to GitHub. This will trigger the deploy part of the test-and-release workflow, so after your adapter passed the (very basic) tests, releases will be created on GitHub and npm. Trouble shooting Error 504 during translation: The translation of longer text snippets fail sometimes. Shorten the text and retry. Also be sure that all is committed. There are often uncommitted changes. But the error message is clear here. Best practice: run the tests locally or at least commit the latest status and push to GitHub and check that testing works BEFORE creating a new version (else you need to revert a lot of stuff (especially io-package!) because the version then never went out. Check your emails/GitHub actions page to see if the release was successfully","title":"Publishing your adapter"},{"location":"getting-started/04-publish-adapter/#publishing-your-adapter","text":"","title":"Publishing your adapter"},{"location":"getting-started/04-publish-adapter/#check-adapter-before-publishing","text":"Of course you should check if your adapter is working as expected, before publishing it. But there are also some requirements that can be automatically tested. You can either do that in the ioBroker developer portal (log in with your GitHub account and it should already list your adapters) or manually online (paste the repository URL there). Some of the warnings can be ignored, for example if your adapter is not yet on npm or in the repository. Good resources for solving such errors and warnings can be found in the best practices and in the review checklist for entry into the repository .","title":"Check Adapter before publishing"},{"location":"getting-started/04-publish-adapter/#publish","text":"It is strongly recommended to use the release script and the test-and-release workflow. If you answered the question 'Do you want to release your adapter with a single comment' in the creator with 'yes', release script should already be installed and configured. If not, have a look here or in the sample adapter .","title":"Publish"},{"location":"getting-started/04-publish-adapter/#npm","text":"In order for the workflow to also publish your adapter to npm, you need to add a secret to your repository. Log in to NPM or create an account (might use your GitHub account for that). You should enable 2FA for your account. On the right side, you should see your profile picture. Click on it and select \"Access Tokens\". Create a new classic token, enter a name for you to identify it by (for example 'ioBroker' or your adapter name) and select 'Automation' as type (if it does not show up, you did not yet enable 2FA for the account, then select 'Publish', but maybe first enable 2FA. It really makes sense!). Now, copy the token . You won't be able to read it again later and have to create a new one.","title":"NPM"},{"location":"getting-started/04-publish-adapter/#add-secret-to-github","text":"Go to your repository on GitHub and select \"Settings\" in the top bar. On the left find \"Secrets and variables\", select \"Actions\" and click on \"New repository secret\". Enter the name NPM_TOKEN and paste the token you copied from npm. Save. Check in Settings/Actions/General if the Workflow permissions are set to \"read and write permissions\". If not, change it and save.","title":"Add Secret to GitHub"},{"location":"getting-started/04-publish-adapter/#enable-automatic-npm-release-in-workflow-file","text":"The last step is to edit the file .github/workflows/test-and-release.yml in your adapter. You can do this either with the online editor at GitHub or with your favorite editor / IDE and pushing to GitHub, just like other files of your adater. Open the file, scroll down to the line, where it says '# TODO: To enable automatic npm releases, create a token on npmjs.org'. Remove that line and uncomment the following lines, starting with the line where it says deploy: . Since it is a yaml file, be sure to keep the indentation. For now, keep the part with sentry commented out.","title":"Enable automatic npm release in workflow file"},{"location":"getting-started/04-publish-adapter/#modify-changelog","text":"In your README.md , at the bottom, there should already be a section 'Work in progress' in the changelog, i.e. looking like this: ### **WORK IN PROGRESS** This line is a placeholder for the actual date of the release. Just add what you modified as bullet points ('*') below that line and the release script will use them as changelog / news and put in the right date. Do this for every release.","title":"Modify changelog"},{"location":"getting-started/04-publish-adapter/#run-release-script","text":"After all of the above is done, run the release script: npm run release It will ask you about the type of release or you can already supply that as parameter ( patch , minor or major ). Basically, if you fix something, use patch , if you add a new feature, use minor , if the user needs to change something, use major . See SemVer for details. The script will assemble the changelog, translate it and put it into the io-package.json , update the version number, in io-package.json and package.json , commit the changes, create a git tag and push everything to GitHub. This will trigger the deploy part of the test-and-release workflow, so after your adapter passed the (very basic) tests, releases will be created on GitHub and npm.","title":"Run release script"},{"location":"getting-started/04-publish-adapter/#trouble-shooting","text":"Error 504 during translation: The translation of longer text snippets fail sometimes. Shorten the text and retry. Also be sure that all is committed. There are often uncommitted changes. But the error message is clear here. Best practice: run the tests locally or at least commit the latest status and push to GitHub and check that testing works BEFORE creating a new version (else you need to revert a lot of stuff (especially io-package!) because the version then never went out. Check your emails/GitHub actions page to see if the release was successfully","title":"Trouble shooting"},{"location":"guidelines/01-best-practices/","text":"Coding best practices","title":"Coding best practices"},{"location":"guidelines/01-best-practices/#coding-best-practices","text":"","title":"Coding best practices"},{"location":"guidelines/02-docs-style-guide/","text":"Documentation style guide Code blocks When providing code examples, ensure to provide those examples for JavaScript and TypeScript. Code examples should be indented with 4 spaces. === \"JavaScript\" ``` js class TestAdapter extends utils.Adapter { /** * @param {Partial<utils.AdapterOptions>} [options={}] */ constructor(options) { super({ ...options, name: 'test-adapter', }); this.on('ready', this.onReady.bind(this)); this.on('stateChange', this.onStateChange.bind(this)); // this.on('objectChange', this.onObjectChange.bind(this)); // this.on('message', this.onMessage.bind(this)); this.on('unload', this.onUnload.bind(this)); } } ``` === \"TypeScript\" ``` ts class TestAdapter extends utils.Adapter { public constructor(options: Partial<utils.AdapterOptions> = {}) { super({ ...options, name: \"test-adapter\", }); this.on(\"ready\", this.onReady.bind(this)); this.on(\"stateChange\", this.onStateChange.bind(this)); // this.on(\"objectChange\", this.onObjectChange.bind(this)); // this.on(\"message\", this.onMessage.bind(this)); this.on(\"unload\", this.onUnload.bind(this)); } } ``` Links When you create links to other documents, please use the regular markdown link outline like See [ getting started ]( ../getting-started/01-installation.md ) for further details. You can also link to another document by using a button: [ Continue to \"Creating your first adapter\" ]( 02-create-adapter.md ){ .md-button .md-button--primary } MkDocs will replace these relative links automatically. Don't use absolute paths!","title":"Documentation style guide"},{"location":"guidelines/02-docs-style-guide/#documentation-style-guide","text":"","title":"Documentation style guide"},{"location":"guidelines/02-docs-style-guide/#code-blocks","text":"When providing code examples, ensure to provide those examples for JavaScript and TypeScript. Code examples should be indented with 4 spaces. === \"JavaScript\" ``` js class TestAdapter extends utils.Adapter { /** * @param {Partial<utils.AdapterOptions>} [options={}] */ constructor(options) { super({ ...options, name: 'test-adapter', }); this.on('ready', this.onReady.bind(this)); this.on('stateChange', this.onStateChange.bind(this)); // this.on('objectChange', this.onObjectChange.bind(this)); // this.on('message', this.onMessage.bind(this)); this.on('unload', this.onUnload.bind(this)); } } ``` === \"TypeScript\" ``` ts class TestAdapter extends utils.Adapter { public constructor(options: Partial<utils.AdapterOptions> = {}) { super({ ...options, name: \"test-adapter\", }); this.on(\"ready\", this.onReady.bind(this)); this.on(\"stateChange\", this.onStateChange.bind(this)); // this.on(\"objectChange\", this.onObjectChange.bind(this)); // this.on(\"message\", this.onMessage.bind(this)); this.on(\"unload\", this.onUnload.bind(this)); } } ```","title":"Code blocks"},{"location":"guidelines/02-docs-style-guide/#links","text":"When you create links to other documents, please use the regular markdown link outline like See [ getting started ]( ../getting-started/01-installation.md ) for further details. You can also link to another document by using a button: [ Continue to \"Creating your first adapter\" ]( 02-create-adapter.md ){ .md-button .md-button--primary } MkDocs will replace these relative links automatically. Don't use absolute paths!","title":"Links"},{"location":"how-tos/add-module/","text":"Add npm module","title":"Add npm module"},{"location":"how-tos/add-module/#add-npm-module","text":"","title":"Add npm module"},{"location":"how-tos/create-object/","text":"Create an object","title":"Create an object"},{"location":"how-tos/create-object/#create-an-object","text":"","title":"Create an object"},{"location":"how-tos/on-events/","text":"React to events","title":"React to events"},{"location":"how-tos/on-events/#react-to-events","text":"","title":"React to events"}]}